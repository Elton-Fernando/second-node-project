
const express = require('express') // 1- para ter acesso as extenÃ§Ãµes do node e o express
const uuid = require('uuid')  // 11- criando o ID 

const port = 3001 // 2- todo local, arquivo tem uma porta de acesso, este Ã© meu acesso ao node. (de 3k pra cima)
const app = express() // 3- criei uma variavel para ter acesso ao express, que agora Ã© sÃ³ usar APP. que vai se referir ao express
app.use(express.json()) // 4- os APP sÃ£o rotas, e Ã© preciso usar isto para ter acesso ao JSON




const users = [] // 7- o que guardarei aqui, sempre guardar no banco de dados, isto aqui Ã© para fins didaticos
          //- (quando tem 3 parametros Ã© um middleware)
const checkuserId = (request, response, next) =>{  // 31- eu vou checar todos usuarios se sÃ£o validos de uma sÃ³ vez asim o ex:18 nÃ£o precisaria estar em todas APPS 
    const {id} = request.params          // 14- com o {id} eu acesso o cliente. .PARAMS Ã© forma que eu acesso o cliente

    const index = users.findIndex (user => user.id === id) // 18- o INDEX Ã© a posiÃ§Ã£o de aonde esta meu usuario"cliente", o USERS eu uso o local aonde vai ser feita a busca, o .FINDINDEX vai me trazer a posiÃ§Ã£o q esta o usuario
    // 18.5 o (USER => USER) Ã© pra percorer usuario por usuario e o .ID === ID ele vai ver se Ã© igual ao que esta no insomnia, quando ele achar ele vai virar o meu INDEX
    if (index < 0) { // 20- IF "se" o index "cliente" for menor < que 0, pq se na busca nÃ£o achar nada ele responde -1, ou seja se nÃ£o achar nada responde com o RETURN
      
        return response.status(404).json({error: "user not found"}) // 21 - retorna o rersponse que Ã© a busca eo .STATUS(404) que Ã© a resposta de nÃ£o encontrado. o .JSON Ã© para retornar uma mensagem ({})
}   
    request.userIndex = index // 32 - o request vai transformar o .userIndex no resultado do index ai de cima, e assim ele vai valer para todos request
    request.userId = id      // 36- agora meu USERID virou meu ID
    next()  // 35-  o NEXT Ã© para que  fluxo continue, como o midd.. ta por primeiro se der algo errado o NEXT continua a aplicaÃ§Ã£o
}  

const checkMethodUrl = (request, response, next) =>{
    console.log(request.method)
    console.log(request.url)
    next()
}

app.get('/order',checkMethodUrl, (request, response) =>{  // 5- os APP sÃ£o rotas o .GET vai mostrar o que tem na porta que acessei e Ã© usado 2 parametros 1 Ã© a rota que usei o USERS e o outro Ã© uma funÃ§Ã£o, na qual usei o REQUEST eo RESPONSE que Ã© o que o express pede

    return response.json(users)  // 13.5- o .JSON Ã© pra me retornar no meu front end o que tem no meu "Users" "rota que lista todos pedidos ja feitos"
})

app.post('/order', checkMethodUrl, (request, response) =>{  // 8- os APP sÃ£o rotas o .POST vai criar informaÃ§Ãµes no back-end Ã© usado 2 parametros 1 Ã© a rota que usei o USERS e o outro Ã© uma funÃ§Ã£o, na qual usei o REQUEST eo RESPONSE que Ã© o que o express pede
    const { order, ClientName, price } = request.body      // 10- vou usar o request.BODY para criar meus dados
    
    const user = { id:uuid.v4(), order, ClientName, price, status:"em preparaÃ§Ã£o" }        // 12- criando o ID:UUID.V4() ele cria um id unico P/ cada cliente ex: um cpf
     
    users.push(user)  // 13- 
    return response.status(201).json(user)  // 9- o .JSON Ã© pra me retornar no meu front end o que tem no meu USERS
})                                      // 9-1 o .STATUS(201) tbm Ã© para usar

app.put('/order/:id',checkuserId, checkMethodUrl, (request, response) =>{  // 13- os APP sÃ£o rotas o .PUT vai acessar os dados do cliente e Ã© usado 2 parametros 1 Ã© a rota que usei o USERS e o outro Ã© uma funÃ§Ã£o, na qual usei o REQUEST eo RESPONSE que Ã© o que o express pede
                                                           // 13- 0 'checkuserId' Ã© um middleware que ja Ã© um resumo de alguns codigos
                                         // 15- no INSOMNIA criar um ID "cliente", criando um PUT, e la ter os dados do cliente
    const {order, ClientName, price} = request.body   // 16- aqui eu vo busca o nome e idade do cliente pelo .BODY
    const index = request.userIndex // 33- aqui meu index"cliente" Ã© o resultado do .userIndex que Ã© a verificaÃ§Ã£o de cada cliente
    const id = request.userId // 37- aqui meu ID vira o resultado do .userId que ja Ã© o caminho do ID criado pelo middleware que vale para todos
    
    const updatedUser = {id, order, ClientName, price, status:"em preparaÃ§Ã£o"}  // 17- vou montar meu usuario criando updat.., usando o id dele com nome e idade

       users[index] =  updatedUser  // 22- isto Ã© para atualizar, o USERS vai trazer [index] "vai vir um numero, posiÃ§Ã£o", e esta posiÃ§Ã£o vai virar o UPDATEDUSER
   // console.log(index) // 19 - isto aqui Ã© sÃ³ pra ver se esta rodando certinho
    return response.json(updatedUser)  // 13.5- o .JSON Ã© pra me retornar no meu front end o que tem no meu "updatedUser" "qual cliente"
})

app.get('/order/:id',checkuserId,checkMethodUrl,(request,response) =>{
    const index = request.userIndex

    const indexConsult = users[index]
    return response.json(indexConsult)
})

app.patch('/order/:id',checkuserId,checkMethodUrl,(request, response) =>{  // 13- os APP sÃ£o rotas o .PUT vai acessar os dados do cliente e Ã© usado 2 parametros 1 Ã© a rota que usei o USERS e o outro Ã© uma funÃ§Ã£o, na qual usei o REQUEST eo RESPONSE que Ã© o que o express pede
    // o 'checkuserId' e o 'checkmethodurl' Ã© um middleware que ja Ã© um resumo de alguns codigos
   const index = request.userIndex

   const update = update[index]
   update.status = "pronto"
    
return response.json(update)  // 13.5- o .JSON Ã© pra me retornar no meu front end o que tem no meu "updatedUser" "qual cliente"
})

app.delete('/order/:id',checkuserId , (request, response) =>{  // 23- o .DELETE vai deletar o "ID" e Ã© usado 2 parametros 1 Ã© a rota que usei o USERS e o outro Ã© uma funÃ§Ã£o, na qual usei o REQUEST eo RESPONSE que Ã© o que o express pede
                                                              // 23- // 13- 0 'checkuserId' Ã© um middleware que ja Ã© um resumo de alguns codigos
    // 25- nÃ£o preciso mais disto -  const {id} = request.params  // 25 - o ID Ã© para ter acesso aos usuarios, .PARAMS Ã© para poder selecionar qual ID
   
   const index = request.userIndex // 34- aqui meu index"clliente" Ã© o resultado do .userIndex que Ã© a verificaÃ§Ã£o de cada cliente
   
   // 26- const index = users.findIndex (user => user.id === id) // 26 - o INDEX Ã© a posiÃ§Ã£o de aonde esta meu usuario"cliente", o USERS eu uso o local aonde vai ser feita a busca, o .FINDINDEX vai me trazer a posiÃ§Ã£o q esta o usuario
   
   // 27- if (index < 0) { // 27- IF "se" o index "cliente" for menor < que 0, pq se na busca nÃ£o achar nada ele responde -1, ou seja se nÃ£o achar nada responde com o RETURN
   // 28-  return response.status(404).json({message: "user not found"}) // 28 - retorna o rersponse que Ã© a busca eo .STATUS(404) que Ã© a resposta de nÃ£o encontrado. o .JSON Ã© para retornar uma mensagem ({})

   users.splice(index,1)  // 29 - o USERS Ã© para ter acesso aos usuarios, .SPLICE() vai selecionar a posiÃ§Ã£o do usuario que vou deletar, o INDEX Ã© o cliente q vai ser selecionado, (INDEX,1) o 1 Ã© a quantidade que vou deletar
   
   return response.status(204).json(users)  // 24- o .STATUS(204) Ã© para trazer o status se deu certo ou nÃ£o o DELETE o .JSON Ã© pra me retornar no meu front end o que tem no meu USERS
})    // 30 - para deletar agora va ao INSOMNIA, va atÃ© aos usuarios copie o ID dele, vÃ¡ atÃ© o DELETE e cole o ID  dele na frente do link, ai Ã© so dar um SEND


app.listen(port, () => {                       // 14 - isto Ã© para rodar no console.log
    console.log(`ðŸš€ Esta Rodando. ${port}`)  
})